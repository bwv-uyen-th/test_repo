
## userUpdate [/v1/user/:id]

### userUpdate [PUT]

#### 処理概要

* `user.id` = `Parameters.id`となる`user`レコードを更新
* `user`テーブルに該当するレコードが存在しない、若しくは論理削除された（`user.deletedAt` != NULL）場合、404エラーを返却
* 指定された`user.id`に紐づく`section.id`の`section.deletedAt` = NULLの場合、404エラーを返却
* ログインユーザーの`user.userFlag` = 1 AND ログインユーザーの`user.id` != `Parameters.id`、403エラーを返却
* `user.email` = `Parameters.email` AND `user.deletedAt` = NULL AND `user.id` != `Parameters.id`となるレコードが存在する場合、エラーを返却 `duplicateValueError`、{0} = `Email`で渡す
* `Parameters.password`が送信されない場合、`user.password`を更新しない 
* `Parameters.password`が送信された AND 送信値 = NULL、エラーを返却 `requiredError`
* `Parameters.password`が送信された AND 送信値 != NULL、`user.password`を更新 

+ Parameters
    + id: `1` (string, required) - ID
    + email: `email@example.com` (string, required) - Email
    + password: `passwordAbc` (string, optional) - Password
    + name: `ABC` (string, required) - User Name
    + sectionId: `2` (string, required) - Section ID
    + joiningDate: `2021-01-01` (string, required) - Joining Date
    + userFlag: `0` (string, required) - UserFlag

+ Response 200 (application/json)
    + Attributes (object)
        + id: `1` (string, required) - ID